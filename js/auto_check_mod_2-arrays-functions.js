// ==========================================================
// ==== ЗАВДАННЯ 1 ====

// ТЕОРІЯ----------
// У функції може бути більше одного оператора return. Головне пам'ятати, що виконання функції переривається, коли інтерпретатор зустрічає повернення, і весь код після нього буде проігнорований в поточному виклику функції.
// Візьмемо вже знайому нам функцію перевірки повноліття. Вона працює, але тут є «зайвий» код, тобто тіло функції можна оптимізувати. В цьому випадку підійде спосіб (патерн) «раннє повернення».
// function checkAge(age) {
//   let message;

//   if (age >= 18) {
//     message = "Ви повнолітня людина";
//   } else {
//     message = "Ви неповнолітня людина";
//   }

//   return message;
// }
// console.log(checkAge(20));
// Якщо умова в if виконується, тобто приводиться до true, повертаємо рядок "You are an adult", і код нижче вже не виконається.
// Якщо умова в if не виконується, тобто приводиться до false, повертаємо рядок "You are a minor".
// Використовуючи патерн «раннє повернення» і те, що виконання функції переривається на операторі return, ми позбавляємося зайвої змінної і блоку else. Тобто цей спосіб допомагає «розгладити» розгалуження.

// ЗАВДАННЯ----------------
// Запиши умову в інструкції if таким чином, щоб функція працювала правильно.

// function checkAge(age) {
//   if (age >= 18) {
//     // Change this line
//     return "You are an adult";
//   }

//   return "You are a minor";
// }

// console.log(checkAge(20));
// console.log(checkAge(8));
// console.log(checkAge(14));
// console.log(checkAge(38));

// ==========================================================
// ==== ЗАВДАННЯ 2 ====

// ЗАДАЧА: ПЕРЕВІРКА ПАРОЛЯ (РАННЄ ПОВЕРНЕННЯ)
// Функція checkPassword отримує пароль користувача у параметр password, перевіряє його на збіг з паролем адміністратора у змінній ADMIN_PASSWORD і повертає повідомлення про результат порівняння.
// Виконай рефакторинг коду функції checkPassword, використовуючи патерн «раннє повернення»:
// видали змінну message
// видали else
// код повинен працювати так само, як і до оптимізації

// function checkPassword(password) {
//   const ADMIN_PASSWORD = "jqueryismyjam";

//   if (password === ADMIN_PASSWORD) {
//     return "Welcome!";
//   }

//   return "Access denied, wrong password!";
// }
// console.log(checkPassword("mangohackzor"));
// console.log(checkPassword("polyhax"));
// console.log(checkPassword("jqueryismyjam"));

// ==========================================================
// ==== ЗАВДАННЯ 3 ====

// ЗАДАЧА: СКЛАД ТОВАРІВ 3.0
// Функція checkStorage перевіряє можливість оформлення замовлення і повертає повідомлення про результат. Вона приймає два параметри, значення яких будуть задаватися під час її виклику.
// available - доступна кількість товарів на складі
// ordered - кількість одиниць товару в замовленні
// Виконай рефакторинг коду функції checkStorage, використовуючи патерн «раннє повернення».

// function checkStorage(available, ordered) {
//   if (ordered === 0) {
//     return "Your order is empty!";
//   }
//   if (ordered > available) {
//     return "Your order is too large, not enough goods in stock!";
//   }

//   return "The order is accepted, our manager will contact you";
// }
// console.log(checkStorage(100, 50));
// console.log(checkStorage(100, 130));
// console.log(checkStorage(70, 0));
// console.log(checkStorage(200, 20));
// console.log(checkStorage(200, 250));
// console.log(checkStorage(150, 0));

// ==========================================================
// ==== ЗАВДАННЯ 4 ====

// ТЕОРІЯ----------
// Масив використовується для зберігання впорядкованої колекції елементів. Він оголошується відкритою і закритою квадратною дужкою [] - літералом масиву. Всередині дужок кожен елемент масиву розділяється комою.
// const planets = ["Earth", "Mars", "Venus"];
// Корисно
// Оголошуючи змінну для об'єкта або масиву, програмісти, як правило, використовують const. Вони роблять це для того, щоб випадково не перезаписати значення, оскільки спроба перезапису викличе помилку до того, як код потрапить до користувача.

// ЗАВДАННЯ----------------
// Оголоси змінну fruits і присвой їй масив фруктів - рядків "apple", "plum", "pear" і "orange".

// const fruits = ["apple", "plum", "pear", "orange"];

// console.log(fruits);

// ==========================================================
// ==== ЗАВДАННЯ 5 ====

// ТЕОРІЯ----------
// Для доступу до значення елемента масиву застосовують синтаксис квадратних дужок масив[індекс].Між ім'ям змінної масиву і квадратними дужками не повинно бути пробілу.
// Увага
// Індексація елементів масиву починається з нуля.
// const planets = ["Earth", "Mars", "Venus"];
// planets[0]; // "Earth"
// planets[2]; // "Venus"

// ЗАВДАННЯ----------------
// Оголоси три змінні і присвой кожній з них значення, використовуючи нотацію квадратних дужок.
// Ім'я змінної     	Значення змінної
// firstElement	       перший елемент масиву
// secondElement	   другий елемент масиву
// lastElement	       останній елемент масиву

// const fruits = ["apple", "plum", "pear", "orange"];
// const firstElement = fruits[0];
// const secondElement = fruits[1];
// const lastElement = fruits[3];

// console.log(firstElement);
// console.log(secondElement);
// console.log(lastElement);

// ==========================================================
// ==== ЗАВДАННЯ 6 ====

// ТЕОРІЯ----------
// На відміну від рядків, елементи масиву можна змінювати, звернувшись до них за індексом і присвоївши інше значення.
// const numbers = [1, 2, 3, 4, 5];
// numbers[0] = 7;
// numbers[2] = 14;
// console.log(numbers); // [7, 2, 14, 4, 5];

// ЗАВДАННЯ----------------
// Виконай перевизначення значення елементів з індексами 1 і 3. Заміни "plum" на "peach", а "orange" на "banana".

// const fruits = ["apple", "plum", "pear", "orange"];
// fruits[1] = "peach";
// fruits[3] = "banana";

// console.log(fruits); // ['apple', 'peach', 'pear', 'banana']
